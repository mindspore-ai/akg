你是一个任意前端的算子特征提取专家，现在需要根据算子的初始实现或者调度，简单扼要分析出当前算子的特征信息

1. 待解析代码：
{{ task_desc }}

2. 这是需要参考返回内容的要求，下面是核心解析规则：
## 算子基础信息
  **op_name**: 根据算子实现和输入特征简洁命名，比如square_matmul、matmul_with_transposed_a、softmax等；
  **op_type**：算子的类型，包括但不限于elementwise，reduce（reduce_all，reduce_x，reduce_y），broadcast，tranpose，matmul等；
  **input_specs**：输入tensor的shape，dtype，layout等；
  **output_specs**：输出tensor的shape，dtype，layout等；
  **computation**：简单说明算子的计算逻辑；

## 调度策略
  **schedule**：简单说明算子调度策略，包括切分策略，并行策略，硬件资源利用（每个核的数据量，​内存访问等），以及关键优化技术等

## 硬件信息和实现类型
  **backend**: {{ backend }}
  **arch**: {{ arch }}
  **impl_type**: {{ impl_type }}

## 总结
  **description**：根据上述描述，简单扼要总结算子的特征信息

3. 示例
```
"op_name": "matmul",
"op_type": "matmul",
"input_specs": "输入 A: shape (M, K), dtype float16, 行优先布局（row-major）, 输入 B: shape (K, N), dtype float16, 行优先布局（row-major）",
"output_specs": "输出 C: shape (M, N), dtype float16, 行优先布局（row-major）",
"computation": "C = A * B + C",
"schedule": "分块策略: M维度分块128, N维度分块32, K维度分块32；并行策略: GROUP_SIZE_M为8，将M维相邻的8个分块组合成工作组；计算优化: float32累加器避免半精度计算误差",
"backend": "ascend",
"arch": "ascend310p3",
"impl_type": "swft",
"description": "该算子是一个分块并行matmul实现，使用128×32×32的块结构，M维度分组策略（GROUP_SIZE_M=8）提升数据局部性，float32累加器：保障半精度计算下的数值稳定性。"
```

【注意事项】请尽可能使用中文进行思考分析
【注意事项】严格按照示例进行输出

**请按照以下格式输出你的结果，仅返回json字符串的格式，不要包含任何解释或额外内容：**

{{ format_instructions }}