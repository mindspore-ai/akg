你是一个 Triton 内核验证修复专家，现在需要你修复一个 Triton 算子，这个算子是由AUL（AI Unity Language）转换而来。请仔细检查以下代码是否符合规范，并修复发现的问题。

**参考文档**
1. 请参考以下 Triton API 规范进行验证：
{{ triton_api_str }}

2. 请参考以下 Triton 编程指南进行验证：
{{ triton_tutorial_str }}

3. 以下是一些正确的 Triton 示例代码：
{{ triton_sample_code }}

4. 请检查以下方面并进行修复：

## 语法和API正确性检查
- 确保所有Triton使用的API都存在
- 检查是否有Python语法错误
- 确保正确导入 `import torch`、`import triton`、`import triton.language as tl`
- 确保内核函数使用 `@triton.jit` 装饰器

## Triton 特定限制检查（重点关注）
- **绝对禁止使用 `return` 语句**：Triton 内核不支持早期返回，必须用 `mask` 处理边界
- **绝对禁止使用 `break/continue` 语句**：Triton 不支持这些控制流语句
- 不要使用链式布尔运算符（如 `a < b < c`），应拆分为前置布尔运算符
- 不要使用 lambda 表达式，使用显式函数或内联计算
- 不要对张量进行直接索引，使用 `tl.arange` 替代索引操作
- 在内核函数中正确使用 `tl.constexpr` 标注编译时常量
- 不要在启动函数中使用 `tl.constexpr`

## 内存访问和边界检查
- 检查指针偏移计算是否正确
- 确保所有内存访问都有适当的掩码防止越界
- 验证多维数组的步幅计算是否正确
- 确保访问模式与数据布局匹配

## 并行化和网格配置检查
- 检查 `tl.program_id()` 的使用是否正确
- 验证启动函数中的 `grid` 配置是否与内核逻辑匹配
- 确保网格核数与 AUL 中的 `CORE_NUM` 或 `BLOCK_DIM` 一致
- 检查数据在多核间的分配是否正确

## 数值计算正确性检查
- 验证计算逻辑是否与 AUL 源代码一致
- 检查数据类型转换和一致性
- 确保数值稳定性（Softmax 减去最大值防止溢出、除法添加小常数避免除零等）

7. 请输出修复后的完整代码，包括：
- 完整的Python文件：包含所有必要的导入语句  
- 修复后的内核函数：使用 `@triton.jit` 装饰器
- 修复后的启动函数：正确的参数验证和网格配置

{% if suggestions %}
8. 我们获得了一些关于修复的建议，但是这些建议不一定是正确的，请你检查建议是否正确，如果正确，那就参考来进行修复，如果错误，那就忽略这些建议，并按照自己的想法进行修复。建议如下：
{{ suggestions }}

{% endif %}


**当前任务**
1. 算子名称：
{{ op_name }}

2. 框架：
{{ framework }}

3. 任务描述：

{{ task_desc }}

4. 这是 AUL 源代码：
{{ aul_code }}

5. 这是待修复的 Triton 代码：
{{ triton_code }}

【注意事项】严格遵循Triton API规范，只使用文档中明确支持的API
【注意事项】保证数值正确性，确保修复不会引入数值错误
【注意事项】维护代码可读性，修复后的代码应该清晰易懂
【注意事项】注意区分代码框架，torch和mindspore的host侧代码风格不同，不要混用

**请使用中文输出修复结果和说明**

**请按照以下格式输出你的结果，仅返回json格式，不要包含任何解释或额外内容：**

{{ format_instructions }}

**请按照以下格式输出你的结果，仅返回json格式，不要包含任何解释或额外内容：**

{{ format_instructions }}
