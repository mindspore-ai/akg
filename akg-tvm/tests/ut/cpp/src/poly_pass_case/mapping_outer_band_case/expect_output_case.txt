domain: "{ S_1[i, j, k] : 0 <= i <= 1023 and 0 <= j <= 1023 and 0 <= k <= 1023;"
          "S_0[i, j] : 0 <= i <= 1023 and 0 <= j <= 1023 }"
child:
  context: "[t1,"
           "t0,"
           "b0,"
           "b1] -> { [] : 0 <= t1 <= 7 and 0 <= t0 <= 31 and 0 <= b0 <= 255 and 0 <= b1 <= 255 }"
  child:
    mark: "block_marker"
    child:
      filter: "[b0,"
              "b1] -> { S_1[i, j, k] : -31 - 32b1 + j <= 8192*floor((j)/8192) <= -32b1 + j and -31 - 32b0 + i <= 8192*floor((i)/8192) <= -32b0 + i;"
                        "S_0[i, j] : -31 - 32b1 + j <= 8192*floor((j)/8192) <= -32b1 + j and -31 - 32b0 + i <= 8192*floor((i)/8192) <= -32b0 + i }"
      child:
        schedule: "[{ S_0[i, j] -> [(floor((i)/32))];"
                    "S_1[i, j, k] -> [(floor((i)/32))] },"
                  "{ S_0[i, j] -> [(floor((j)/32))];"
                    "S_1[i, j, k] -> [(floor((j)/32))] },"
                  "{ S_0[i, j] -> [(0)];"
                    "S_1[i, j, k] -> [(floor((k)/32))] }]"
        permutable: 1
        coincident: [ 1, 1, 0 ]
        child:
          schedule: "[{ S_0[i, j] -> [(floor((i)/8) - 4*floor((i)/32))];"
                      "S_1[i, j, k] -> [(floor((i)/8) - 4*floor((i)/32))] },"
                    "{ S_0[i, j] -> [(0)];"
                      "S_1[i, j, k] -> [(0)] }]"
          permutable: 1
          coincident: [ 1, 1 ]
          child:
            mark: "thread_marker"
            child:
              filter: "[t0,"
                      "t1] -> { S_0[i, j] : (-t1 + i) mod 8 = 0 and (-t0 + j) mod 32 = 0 and 0 <= t0 <= 31 and 0 <= t1 <= 7;"
                                "S_1[i, j, k] : (-t1 + i) mod 8 = 0 and (-t0 + j) mod 32 = 0 and 0 <= t0 <= 31 and 0 <= t1 <= 7 }"
              child:
                schedule: "[{ S_0[i, j] -> [((i) mod 8)];"
                            "S_1[i, j, k] -> [((i) mod 8)] },"
                          "{ S_0[i, j] -> [((j) mod 32)];"
                            "S_1[i, j, k] -> [((j) mod 32)] }]"
                permutable: 1
                coincident: [ 1, 1 ]
                child:
                  schedule: "[{ S_0[i, j] -> [(0)];"
                              "S_1[i, j, k] -> [((k) mod 32)] }]"
                  permutable: 1
                  child:
                    sequence:
                    - filter: "{ S_0[i, j] }"
                    - filter: "{ S_1[i, j, k] }"
