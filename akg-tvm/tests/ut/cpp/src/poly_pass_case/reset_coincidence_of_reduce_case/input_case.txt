domain: "{ S_2[ax0, k0, k1] : 0 <= ax0 <= 31 and 0 <= k0 <= 31 and 0 <= k1 <= 63;"
          "S_3[ax0] : 0 <= ax0 <= 31;"
          "S_0[ax0, k0, k1] : 0 <= ax0 <= 31 and 0 <= k0 <= 31 and 0 <= k1 <= 63;"
          "S_1[ax0] : 0 <= ax0 <= 31 }"
child:
  mark: "realize_UB"
  child:
    schedule: "[{ S_2[ax0, k0, k1] -> [(floor((ax0)/32))];"
                 "S_0[ax0, k0, k1] -> [(floor((ax0)/32))];"
                 "S_3[ax0] -> [(floor((ax0)/32))];"
                 "S_1[ax0] -> [(floor((ax0)/32))] },"
               "{ S_2[ax0, k0, k1] -> [(floor((k0)/4))];"
                 "S_0[ax0, k0, k1] -> [(floor((k0)/4))];"
                 "S_3[ax0] -> [(7)];"
                 "S_1[ax0] -> [(0)] },"
               "{ S_2[ax0, k0, k1] -> [(floor((k1)/64))];"
                 "S_0[ax0, k0, k1] -> [(floor((k1)/64))];"
                 "S_3[ax0] -> [(0)];"
                 "S_1[ax0] -> [(0)] }]"
    permutable: 1
    coincident: [ 1, 1, 1 ]
    options: "{ isolate[[] -> [0, i1, 0]] : 0 <= i1 <= 7 }"
    child:
      schedule: "[{ S_2[ax0, k0, k1] -> [((ax0) mod 32)];"
                   "S_0[ax0, k0, k1] -> [((ax0) mod 32)];"
                   "S_3[ax0] -> [((ax0) mod 32)];"
                   "S_1[ax0] -> [((ax0) mod 32)] },"
                 "{ S_2[ax0, k0, k1] -> [((k0) mod 4)];"
                   "S_0[ax0, k0, k1] -> [((k0) mod 4)];"
                   "S_3[ax0] -> [(3)];"
                   "S_1[ax0] -> [(0)] },"
                 "{ S_2[ax0, k0, k1] -> [((k1) mod 64)];"
                   "S_0[ax0, k0, k1] -> [((k1) mod 64)];"
                   "S_3[ax0] -> [(63)];"
                   "S_1[ax0] -> [(0)] }]"
      permutable: 1
      coincident: [ 1, 1, 1 ]
      child:
        sequence:
        - filter: "{ S_1[ax0] }"
        - filter: "{ S_0[ax0, k0, k1] }"
        - filter: "{ S_2[ax0, k0, k1] }"
        - filter: "{ S_3[ax0] }"
