domain: "{ S_0[i0, i1, i2, i3, i4, i5] : 0 <= i0 <= 15 and 0 <= i1 <= 15 and 0 <= i2 <= 3 and 0 <= i3 <= 31 and 0 <= i4 <= 15 and 0 <= i5 <= 15;"
          "S_2[i0, i1, i2, i3, i4, i5] : 0 <= i0 <= 15 and 0 <= i1 <= 15 and 0 <= i2 <= 3 and 0 <= i3 <= 31 and 0 <= i4 <= 15 and 0 <= i5 <= 15;"
          "S_1[i0, i1, i2, i3, i4, i5, ko, ki] : 0 <= i0 <= 15 and 0 <= i1 <= 15 and 0 <= i2 <= 3 and 0 <= i3 <= 31 and 0 <= i4 <= 15 and 0 <= i5 <= 15 and 0 <= ko <= 31 and 0 <= ki <= 15 }"
child:
  schedule: "[{ S_2[i0, i1, i2, i3, i4, i5] -> [(i0)];"
               "S_1[i0, i1, i2, i3, i4, i5, ko, ki] -> [(i0)];"
               "S_0[i0, i1, i2, i3, i4, i5] -> [(i0)] },"
             "{ S_2[i0, i1, i2, i3, i4, i5] -> [(i1)];"
               "S_1[i0, i1, i2, i3, i4, i5, ko, ki] -> [(i1)];"
               "S_0[i0, i1, i2, i3, i4, i5] -> [(i1)] },"
             "{ S_2[i0, i1, i2, i3, i4, i5] -> [(floor((i2)/4))];"
               "S_1[i0, i1, i2, i3, i4, i5, ko, ki] -> [(floor((i2)/4))];"
               "S_0[i0, i1, i2, i3, i4, i5] -> [(floor((i2)/4))] },"
             "{ S_2[i0, i1, i2, i3, i4, i5] -> [(floor((i3)/16))];"
               "S_1[i0, i1, i2, i3, i4, i5, ko, ki] -> [(floor((i3)/16))];"
               "S_0[i0, i1, i2, i3, i4, i5] -> [(floor((i3)/16))] },"
             "{ S_2[i0, i1, i2, i3, i4, i5] -> [(floor((i4)/16))];"
               "S_1[i0, i1, i2, i3, i4, i5, ko, ki] -> [(floor((i4)/16))];"
               "S_0[i0, i1, i2, i3, i4, i5] -> [(floor((i4)/16))] },"
             "{ S_2[i0, i1, i2, i3, i4, i5] -> [(floor((i5)/16))];"
               "S_1[i0, i1, i2, i3, i4, i5, ko, ki] -> [(floor((i5)/16))];"
               "S_0[i0, i1, i2, i3, i4, i5] -> [(floor((i5)/16))] }]"
  permutable: 1
  coincident: [ 1, 1, 1, 1, 1, 1 ]
  options: "{ isolate[[] -> [i0, i1, 0, i3, 0, 0]] : 0 <= i0 <= 15 and 0 <= i1 <= 15 and 0 <= i3 <= 1 }"
  child:
    mark: "alloc_C"
    child:
      schedule: "[{ S_2[i0, i1, i2, i3, i4, i5] -> [(1)];"
                   "S_1[i0, i1, i2, i3, i4, i5, ko, ki] -> [(floor((ko)/16))];"
                   "S_0[i0, i1, i2, i3, i4, i5] -> [(0)] }]"
      permutable: 1
      options: "{ isolate[[i0, i1, 0, i3, 0, 0] -> [i6]] : 0 <= i0 <= 15 and 0 <= i1 <= 15 and 0 <= i3 <= 1 and 0 <= i6 <= 1 }"
      child:
        mark: "realize_L1"
        child:
          sequence:
          - filter: "{ S_1[i0, i1, i2, i3, i4, i5, ko, ki];"
                      "S_0[i0, i1, i2, i3, i4, i5] }"
            child:
              extension: "{ [i0, i1, i2, i3, 0, i5, i6] -> GMread[[[i0, i1, i2, i3, 0, i5, i6] -> input_2[arg0 = i0, arg1 = i1, arg2, arg3, arg4, arg5]] -> input_2_local_L1[arg0' = 0, arg1' = 0, arg2' = arg2, arg3' = -16i6 + arg3, arg4' = arg4, arg5' = arg5]] : 0 <= i0 <= 15 and 0 <= i1 <= 15 and 0 <= i3 <= 1 and arg2 >= 4i2 and 0 <= arg2 <= 3 and arg2 <= 3 + 4i2 and arg3 >= 16i6 and 0 <= arg3 <= 31 and arg3 <= 15 + 16i6 and 0 <= arg4 <= 15 and arg5 >= 16i5 and 0 <= arg5 <= 15 and arg5 <= 15 + 16i5 }"
              child:
                sequence:
                - filter: "{ GMread[[[i0, i1, i2, i3, i4, i5, i6] -> input_2[arg0, arg1, arg2, arg3, arg4, arg5]] -> input_2_local_L1[arg0', arg1', arg2', arg3', arg4', arg5']] }"
                  child:
                    schedule: "[{ GMread[[[i0, i1, i2, i3, i4, i5, i6] -> input_2[arg0, arg1, arg2, arg3, arg4, arg5]] -> input_2_local_L1[arg0', arg1', arg2', arg3', arg4', arg5']] -> [(arg2')] },"
                               "{ GMread[[[i0, i1, i2, i3, i4, i5, i6] -> input_2[arg0, arg1, arg2, arg3, arg4, arg5]] -> input_2_local_L1[arg0', arg1', arg2', arg3', arg4', arg5']] -> [(arg3')] },"
                               "{ GMread[[[i0, i1, i2, i3, i4, i5, i6] -> input_2[arg0, arg1, arg2, arg3, arg4, arg5]] -> input_2_local_L1[arg0', arg1', arg2', arg3', arg4', arg5']] -> [(arg4')] },"
                               "{ GMread[[[i0, i1, i2, i3, i4, i5, i6] -> input_2[arg0, arg1, arg2, arg3, arg4, arg5]] -> input_2_local_L1[arg0', arg1', arg2', arg3', arg4', arg5']] -> [(arg5')] }]"
                - filter: "{ S_1[i0, i1, i2, i3, i4, i5, ko, ki];"
                            "S_0[i0, i1, i2, i3, i4, i5] }"
                  child:
                    extension: "{ [i0, i1, 0, i3, i4, 0, i6] -> GMread[[[i0, i1, 0, i3, i4, 0, i6] -> input_1[arg0 = i0, arg1 = i1, arg2, arg3, arg4, arg5]] -> input_1_local_L1[arg0' = 0, arg1' = 0, arg2' = -16i6 + arg2, arg3' = -16i3 + arg3, arg4' = arg4, arg5' = arg5]] : 0 <= i0 <= 15 and 0 <= i1 <= 15 and arg2 >= 16i6 and 0 <= arg2 <= 31 and arg2 <= 15 + 16i6 and arg3 >= 16i3 and 0 <= arg3 <= 31 and arg3 <= 15 + 16i3 and arg4 >= 16i4 and 0 <= arg4 <= 15 and arg4 <= 15 + 16i4 and 0 <= arg5 <= 15 }"
                    child:
                      sequence:
                      - filter: "{ GMread[[[i0, i1, i2, i3, i4, i5, i6] -> input_1[arg0, arg1, arg2, arg3, arg4, arg5]] -> input_1_local_L1[arg0', arg1', arg2', arg3', arg4', arg5']] }"
                        child:
                          schedule: "[{ GMread[[[i0, i1, i2, i3, i4, i5, i6] -> input_1[arg0, arg1, arg2, arg3, arg4, arg5]] -> input_1_local_L1[arg0', arg1', arg2', arg3', arg4', arg5']] -> [(arg2')] },"
                                     "{ GMread[[[i0, i1, i2, i3, i4, i5, i6] -> input_1[arg0, arg1, arg2, arg3, arg4, arg5]] -> input_1_local_L1[arg0', arg1', arg2', arg3', arg4', arg5']] -> [(arg3')] },"
                                     "{ GMread[[[i0, i1, i2, i3, i4, i5, i6] -> input_1[arg0, arg1, arg2, arg3, arg4, arg5]] -> input_1_local_L1[arg0', arg1', arg2', arg3', arg4', arg5']] -> [(arg4')] },"
                                     "{ GMread[[[i0, i1, i2, i3, i4, i5, i6] -> input_1[arg0, arg1, arg2, arg3, arg4, arg5]] -> input_1_local_L1[arg0', arg1', arg2', arg3', arg4', arg5']] -> [(arg5')] }]"
                      - filter: "{ S_1[i0, i1, i2, i3, i4, i5, ko, ki];"
                                  "S_0[i0, i1, i2, i3, i4, i5] }"
                        child:
                          schedule: "[{ S_1[i0, i1, i2, i3, i4, i5, ko, ki] -> [(0)];"
                                       "S_0[i0, i1, i2, i3, i4, i5] -> [(0)] },"
                                     "{ S_1[i0, i1, i2, i3, i4, i5, ko, ki] -> [(0)];"
                                       "S_0[i0, i1, i2, i3, i4, i5] -> [(0)] },"
                                     "{ S_1[i0, i1, i2, i3, i4, i5, ko, ki] -> [(0)];"
                                       "S_0[i0, i1, i2, i3, i4, i5] -> [(0)] },"
                                     "{ S_1[i0, i1, i2, i3, i4, i5, ko, ki] -> [(0)];"
                                       "S_0[i0, i1, i2, i3, i4, i5] -> [(0)] },"
                                     "{ S_1[i0, i1, i2, i3, i4, i5, ko, ki] -> [(0)];"
                                       "S_0[i0, i1, i2, i3, i4, i5] -> [(0)] },"
                                     "{ S_1[i0, i1, i2, i3, i4, i5, ko, ki] -> [(0)];"
                                       "S_0[i0, i1, i2, i3, i4, i5] -> [(0)] },"
                                     "{ S_1[i0, i1, i2, i3, i4, i5, ko, ki] -> [(floor((ko)/4) - 4*floor((ko)/16))];"
                                       "S_0[i0, i1, i2, i3, i4, i5] -> [(0)] }]"
                          permutable: 1
                          coincident: [ 1, 1, 1, 1, 1, 1, 0 ]
                          options: "{ isolate[[i0, i1, 0, i3, 0, 0, i6] -> [0, 0, 0, 0, 0, 0, i13]] : 0 <= i0 <= 15 and 0 <= i1 <= 15 and 0 <= i3 <= 1 and 0 <= i6 <= 1 and 0 <= i13 <= 3;"
                                     "isolate[[i0, i1, 0, i3, 0, 0, i6] -> [0, 0, 0, 0, 0, 0, 0]] : 0 <= i0 <= 15 and 0 <= i1 <= 15 and 0 <= i3 <= 1 and 0 <= i6 <= 1 }"
                          child:
                            mark: "realize_L0"
                            child:
                              sequence:
                              - filter: "{ S_1[i0, i1, i2, i3, i4, i5, ko, ki];"
                                          "S_0[i0, i1, i2, i3, i4, i5] }"
                                child:
                                  extension: "{ [i0, i1, i2, i3, i4, i5, i6, 0, 0, 0, 0, 0, 0, i13] -> UBL0write[[[i0, i1, i2, i3, i4, i5, i6, 0, 0, 0, 0, 0, 0, i13] -> resMatmul_local_UB[arg0 = 0, arg1 = 0, arg2, arg3, arg4, arg5]] -> resMatmul_local_UB_local_L0C[arg0' = 0, arg1' = 0, arg2' = arg2, arg3' = arg3, arg4' = arg4, arg5' = arg5]] : 0 <= i0 <= 15 and 0 <= i1 <= 15 and 0 <= i6 <= 1 and 0 <= i13 <= 3 and arg2 >= 4i2 and 0 <= arg2 <= 3 and arg2 <= 3 + 4i2 and arg3 >= 0 and -16i3 <= arg3 <= 31 - 16i3 and arg3 <= 15 and arg4 >= 16i4 and 0 <= arg4 <= 15 and arg4 <= 15 + 16i4 and arg5 >= 16i5 and 0 <= arg5 <= 15 and arg5 <= 15 + 16i5;"
                                               "[i0, i1, i2, i3, i4, i5, 0, 0, 0, 0, 0, 0, 0, 0] -> UBL0write[[[i0, i1, i2, i3, i4, i5, 0, 0, 0, 0, 0, 0, 0, 0] -> resMatmul_local_UB[arg0 = 0, arg1 = 0, arg2, arg3, arg4, arg5]] -> resMatmul_local_UB_local_L0C[arg0' = 0, arg1' = 0, arg2' = arg2, arg3' = arg3, arg4' = arg4, arg5' = arg5]] : 0 <= i0 <= 15 and 0 <= i1 <= 15 and arg2 >= 4i2 and 0 <= arg2 <= 3 and arg2 <= 3 + 4i2 and arg3 >= 0 and -16i3 <= arg3 <= 31 - 16i3 and arg3 <= 15 and arg4 >= 16i4 and 0 <= arg4 <= 15 and arg4 <= 15 + 16i4 and arg5 >= 16i5 and 0 <= arg5 <= 15 and arg5 <= 15 + 16i5 }"
                                  child:
                                    sequence:
                                    - filter: "{ S_1[i0, i1, i2, i3, i4, i5, ko, ki];"
                                                "S_0[i0, i1, i2, i3, i4, i5] }"
                                      child:
                                        extension: "{ [i0, i1, i2, i3, 0, i5, i6, 0, 0, 0, 0, 0, 0, i13] -> L1read[[[i0, i1, i2, i3, 0, i5, i6, 0, 0, 0, 0, 0, 0, i13] -> input_2_local_L1[arg0 = 0, arg1 = 0, arg2, arg3, arg4, arg5]] -> input_2_local_L1_local_L0B[arg0' = 0, arg1' = 0, arg2' = arg2, arg3' = -4i13 + arg3, arg4' = arg4, arg5' = arg5]] : 0 <= i0 <= 15 and 0 <= i1 <= 15 and 0 <= i3 <= 1 and arg2 >= 4i2 and 0 <= arg2 <= 3 and arg2 <= 3 + 4i2 and arg3 >= 4i13 and arg3 >= 0 and -16i6 <= arg3 <= 31 - 16i6 and arg3 <= 15 and arg3 <= 3 + 4i13 and 0 <= arg4 <= 15 and arg5 >= 16i5 and 0 <= arg5 <= 15 and arg5 <= 15 + 16i5 and -3 - 4i13 + arg3 <= 16*floor((arg3)/16) <= -4i13 + arg3 }"
                                        child:
                                          sequence:
                                          - filter: "{ L1read[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> input_2_local_L1[arg0, arg1, arg2, arg3, arg4, arg5]] -> input_2_local_L1_local_L0B[arg0', arg1', arg2', arg3', arg4', arg5']] }"
                                            child:
                                              schedule: "[{ L1read[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> input_2_local_L1[arg0, arg1, arg2, arg3, arg4, arg5]] -> input_2_local_L1_local_L0B[arg0', arg1', arg2', arg3', arg4', arg5']] -> [(arg2')] },"
                                                         "{ L1read[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> input_2_local_L1[arg0, arg1, arg2, arg3, arg4, arg5]] -> input_2_local_L1_local_L0B[arg0', arg1', arg2', arg3', arg4', arg5']] -> [(arg3')] },"
                                                         "{ L1read[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> input_2_local_L1[arg0, arg1, arg2, arg3, arg4, arg5]] -> input_2_local_L1_local_L0B[arg0', arg1', arg2', arg3', arg4', arg5']] -> [(arg4')] },"
                                                         "{ L1read[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> input_2_local_L1[arg0, arg1, arg2, arg3, arg4, arg5]] -> input_2_local_L1_local_L0B[arg0', arg1', arg2', arg3', arg4', arg5']] -> [(arg5')] }]"
                                          - filter: "{ S_1[i0, i1, i2, i3, i4, i5, ko, ki];"
                                                      "S_0[i0, i1, i2, i3, i4, i5] }"
                                            child:
                                              extension: "{ [i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> L1read[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> input_2_local_L1_local_L0B[arg0 = 0, arg1 = 0, arg2, arg3, arg4, arg5]] -> input_2_local_L1_local_L0B[arg0' = 0, arg1' = 0, arg2' = arg3, arg3' = arg2, arg4' = arg5, arg5' = arg4]] : 0 <= arg2 <= 3 and 0 <= arg3 <= 3 and 0 <= arg4 <= 15 and 0 <= arg5 <= 15 }"
                                              child:
                                                sequence:
                                                - filter: "{ L1read[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> input_2_local_L1_local_L0B[arg0, arg1, arg2, arg3, arg4, arg5]] -> input_2_local_L1_local_L0B[arg0', arg1', arg2', arg3', arg4', arg5']] }"
                                                  child:
                                                    schedule: "[{ L1read[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> input_2_local_L1_local_L0B[arg0, arg1, arg2, arg3, arg4, arg5]] -> input_2_local_L1_local_L0B[arg0', arg1', arg2', arg3', arg4', arg5']] -> [(arg2')] },"
                                                               "{ L1read[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> input_2_local_L1_local_L0B[arg0, arg1, arg2, arg3, arg4, arg5]] -> input_2_local_L1_local_L0B[arg0', arg1', arg2', arg3', arg4', arg5']] -> [(arg3')] },"
                                                               "{ L1read[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> input_2_local_L1_local_L0B[arg0, arg1, arg2, arg3, arg4, arg5]] -> input_2_local_L1_local_L0B[arg0', arg1', arg2', arg3', arg4', arg5']] -> [(arg4')] },"
                                                               "{ L1read[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> input_2_local_L1_local_L0B[arg0, arg1, arg2, arg3, arg4, arg5]] -> input_2_local_L1_local_L0B[arg0', arg1', arg2', arg3', arg4', arg5']] -> [(arg5')] }]"
                                                - filter: "{ S_1[i0, i1, i2, i3, i4, i5, ko, ki];"
                                                            "S_0[i0, i1, i2, i3, i4, i5] }"
                                                  child:
                                                    extension: "{ [i0, i1, 0, i3, i4, 0, i6, 0, 0, 0, 0, 0, 0, i13] -> L1read[[[i0, i1, 0, i3, i4, 0, i6, 0, 0, 0, 0, 0, 0, i13] -> input_1_local_L1[arg0 = 0, arg1 = 0, arg2, arg3, arg4, arg5]] -> input_1_local_L1_local_L0A[arg0' = 0, arg1' = 0, arg2' = -4i13 + arg2, arg3' = arg3, arg4' = arg4, arg5' = arg5]] : 0 <= i0 <= 15 and 0 <= i1 <= 15 and arg2 >= 4i13 and arg2 >= 0 and -16i6 <= arg2 <= 31 - 16i6 and arg2 <= 15 and arg2 <= 3 + 4i13 and arg3 >= 0 and -16i3 <= arg3 <= 31 - 16i3 and arg3 <= 15 and arg4 >= 16i4 and 0 <= arg4 <= 15 and arg4 <= 15 + 16i4 and 0 <= arg5 <= 15 and -3 - 4i13 + arg2 <= 16*floor((arg2)/16) <= -4i13 + arg2 }"
                                                    child:
                                                      sequence:
                                                      - filter: "{ L1read[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> input_1_local_L1[arg0, arg1, arg2, arg3, arg4, arg5]] -> input_1_local_L1_local_L0A[arg0', arg1', arg2', arg3', arg4', arg5']] }"
                                                        child:
                                                          schedule: "[{ L1read[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> input_1_local_L1[arg0, arg1, arg2, arg3, arg4, arg5]] -> input_1_local_L1_local_L0A[arg0', arg1', arg2', arg3', arg4', arg5']] -> [(arg2')] },"
                                                                     "{ L1read[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> input_1_local_L1[arg0, arg1, arg2, arg3, arg4, arg5]] -> input_1_local_L1_local_L0A[arg0', arg1', arg2', arg3', arg4', arg5']] -> [(arg3')] },"
                                                                     "{ L1read[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> input_1_local_L1[arg0, arg1, arg2, arg3, arg4, arg5]] -> input_1_local_L1_local_L0A[arg0', arg1', arg2', arg3', arg4', arg5']] -> [(arg4')] },"
                                                                     "{ L1read[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> input_1_local_L1[arg0, arg1, arg2, arg3, arg4, arg5]] -> input_1_local_L1_local_L0A[arg0', arg1', arg2', arg3', arg4', arg5']] -> [(arg5')] }]"
                                                      - filter: "{ S_1[i0, i1, i2, i3, i4, i5, ko, ki];"
                                                                  "S_0[i0, i1, i2, i3, i4, i5] }"
                                                        child:
                                                          extension: "{ [i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> L1read[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> input_1_local_L1_local_L0A[arg0 = 0, arg1 = 0, arg2, arg3, arg4, arg5]] -> input_1_local_L1_local_L0A[arg0' = 0, arg1' = 0, arg2' = arg3, arg3' = arg2, arg4' = arg4, arg5' = arg5]] : 0 <= arg2 <= 3 and 0 <= arg3 <= 15 and 0 <= arg4 <= 15 and 0 <= arg5 <= 15 }"
                                                          child:
                                                            sequence:
                                                            - filter: "{ L1read[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> input_1_local_L1_local_L0A[arg0, arg1, arg2, arg3, arg4, arg5]] -> input_1_local_L1_local_L0A[arg0', arg1', arg2', arg3', arg4', arg5']] }"
                                                              child:
                                                                schedule: "[{ L1read[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> input_1_local_L1_local_L0A[arg0, arg1, arg2, arg3, arg4, arg5]] -> input_1_local_L1_local_L0A[arg0', arg1', arg2', arg3', arg4', arg5']] -> [(arg2')] },"
                                                                           "{ L1read[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> input_1_local_L1_local_L0A[arg0, arg1, arg2, arg3, arg4, arg5]] -> input_1_local_L1_local_L0A[arg0', arg1', arg2', arg3', arg4', arg5']] -> [(arg3')] },"
                                                                           "{ L1read[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> input_1_local_L1_local_L0A[arg0, arg1, arg2, arg3, arg4, arg5]] -> input_1_local_L1_local_L0A[arg0', arg1', arg2', arg3', arg4', arg5']] -> [(arg4')] },"
                                                                           "{ L1read[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> input_1_local_L1_local_L0A[arg0, arg1, arg2, arg3, arg4, arg5]] -> input_1_local_L1_local_L0A[arg0', arg1', arg2', arg3', arg4', arg5']] -> [(arg5')] }]"
                                                            - filter: "{ S_1[i0, i1, i2, i3, i4, i5, ko, ki];"
                                                                        "S_0[i0, i1, i2, i3, i4, i5] }"
                                                              child:
                                                                schedule: "[{ S_1[i0, i1, i2, i3, i4, i5, ko, ki] -> [(0)];"
                                                                             "S_0[i0, i1, i2, i3, i4, i5] -> [(0)] },"
                                                                           "{ S_1[i0, i1, i2, i3, i4, i5, ko, ki] -> [(0)];"
                                                                             "S_0[i0, i1, i2, i3, i4, i5] -> [(0)] },"
                                                                           "{ S_1[i0, i1, i2, i3, i4, i5, ko, ki] -> [((i2) mod 4)];"
                                                                             "S_0[i0, i1, i2, i3, i4, i5] -> [((i2) mod 4)] },"
                                                                           "{ S_1[i0, i1, i2, i3, i4, i5, ko, ki] -> [((i3) mod 16)];"
                                                                             "S_0[i0, i1, i2, i3, i4, i5] -> [((i3) mod 16)] },"
                                                                           "{ S_1[i0, i1, i2, i3, i4, i5, ko, ki] -> [((i4) mod 16)];"
                                                                             "S_0[i0, i1, i2, i3, i4, i5] -> [((i4) mod 16)] },"
                                                                           "{ S_1[i0, i1, i2, i3, i4, i5, ko, ki] -> [((i5) mod 16)];"
                                                                             "S_0[i0, i1, i2, i3, i4, i5] -> [((i5) mod 16)] },"
                                                                           "{ S_1[i0, i1, i2, i3, i4, i5, ko, ki] -> [((ko) mod 4)];"
                                                                             "S_0[i0, i1, i2, i3, i4, i5] -> [(0)] }]"
                                                                permutable: 1
                                                                coincident: [ 1, 1, 1, 1, 1, 1, 0 ]
                                                                child:
                                                                  schedule: "[{ S_1[i0, i1, i2, i3, i4, i5, ko, ki] -> [(ki)];"
                                                                               "S_0[i0, i1, i2, i3, i4, i5] -> [(0)] }]"
                                                                  permutable: 1
                                                                  child:
                                                                    sequence:
                                                                    - filter: "{ S_0[i0, i1, i2, i3, i4, i5] }"
                                                                    - filter: "{ S_1[i0, i1, i2, i3, i4, i5, ko, ki] }"
                                    - filter: "{ UBL0write[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> resMatmul_local_UB[arg0, arg1, arg2, arg3, arg4, arg5]] -> resMatmul_local_UB_local_L0C[arg0', arg1', arg2', arg3', arg4', arg5']] }"
                                      child:
                                        schedule: "[{ UBL0write[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> resMatmul_local_UB[arg0, arg1, arg2, arg3, arg4, arg5]] -> resMatmul_local_UB_local_L0C[arg0', arg1', arg2', arg3', arg4', arg5']] -> [(arg2')] },"
                                                   "{ UBL0write[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> resMatmul_local_UB[arg0, arg1, arg2, arg3, arg4, arg5]] -> resMatmul_local_UB_local_L0C[arg0', arg1', arg2', arg3', arg4', arg5']] -> [(arg3')] },"
                                                   "{ UBL0write[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> resMatmul_local_UB[arg0, arg1, arg2, arg3, arg4, arg5]] -> resMatmul_local_UB_local_L0C[arg0', arg1', arg2', arg3', arg4', arg5']] -> [(arg4')] },"
                                                   "{ UBL0write[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> resMatmul_local_UB[arg0, arg1, arg2, arg3, arg4, arg5]] -> resMatmul_local_UB_local_L0C[arg0', arg1', arg2', arg3', arg4', arg5']] -> [(arg5')] }]"
          - filter: "{ S_2[i0, i1, i2, i3, i4, i5] }"
            child:
              schedule: "[{ S_2[i0, i1, i2, i3, i4, i5] -> [(0)] },"
                         "{ S_2[i0, i1, i2, i3, i4, i5] -> [(0)] },"
                         "{ S_2[i0, i1, i2, i3, i4, i5] -> [(0)] },"
                         "{ S_2[i0, i1, i2, i3, i4, i5] -> [(0)] },"
                         "{ S_2[i0, i1, i2, i3, i4, i5] -> [(0)] },"
                         "{ S_2[i0, i1, i2, i3, i4, i5] -> [(0)] },"
                         "{ S_2[i0, i1, i2, i3, i4, i5] -> [(3)] }]"
              permutable: 1
              coincident: [ 1, 1, 1, 1, 1, 1, 0 ]
              options: "{ isolate[[i0, i1, 0, i3, 0, 0, 1] -> [0, 0, 0, 0, 0, 0, 3]] : 0 <= i0 <= 15 and 0 <= i1 <= 15 and 0 <= i3 <= 1 }"
              child:
                mark: "fuse_vector"
                child:
                  mark: "realize_UBL0"
                  child:
                    sequence:
                    - filter: "{ S_2[i0, i1, i2, i3, i4, i5] }"
                      child:
                        extension: "{ [i0, i1, i2, i3, i4, i5, 1, 0, 0, 0, 0, 0, 0, 3] -> GMwrite[[[i0, i1, i2, i3, i4, i5, 1, 0, 0, 0, 0, 0, 0, 3] -> resMatmul_cast[arg0 = i0, arg1 = i1, arg2, arg3, arg4, arg5]] -> resMatmul_cast_local_UB[arg0' = 0, arg1' = 0, arg2' = arg2, arg3' = -16i3 + arg3, arg4' = arg4, arg5' = arg5]] : 0 <= i0 <= 15 and 0 <= i1 <= 15 and arg2 >= 4i2 and 0 <= arg2 <= 3 and arg2 <= 3 + 4i2 and arg3 >= 16i3 and 0 <= arg3 <= 31 and arg3 <= 15 + 16i3 and arg4 >= 16i4 and 0 <= arg4 <= 15 and arg4 <= 15 + 16i4 and arg5 >= 16i5 and 0 <= arg5 <= 15 and arg5 <= 15 + 16i5 }"
                        child:
                          sequence:
                          - filter: "{ S_2[i0, i1, i2, i3, i4, i5] }"
                            child:
                              schedule: "[{ S_2[i0, i1, i2, i3, i4, i5] -> [(0)] },"
                                         "{ S_2[i0, i1, i2, i3, i4, i5] -> [(0)] },"
                                         "{ S_2[i0, i1, i2, i3, i4, i5] -> [((i2) mod 4)] },"
                                         "{ S_2[i0, i1, i2, i3, i4, i5] -> [((i3) mod 16)] },"
                                         "{ S_2[i0, i1, i2, i3, i4, i5] -> [((i4) mod 16)] },"
                                         "{ S_2[i0, i1, i2, i3, i4, i5] -> [((i5) mod 16)] },"
                                         "{ S_2[i0, i1, i2, i3, i4, i5] -> [(3)] }]"
                              permutable: 1
                              coincident: [ 1, 1, 1, 1, 1, 1, 0 ]
                          - filter: "{ GMwrite[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> resMatmul_cast[arg0, arg1, arg2, arg3, arg4, arg5]] -> resMatmul_cast_local_UB[arg0', arg1', arg2', arg3', arg4', arg5']] }"
                            child:
                              schedule: "[{ GMwrite[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> resMatmul_cast[arg0, arg1, arg2, arg3, arg4, arg5]] -> resMatmul_cast_local_UB[arg0', arg1', arg2', arg3', arg4', arg5']] -> [(arg2')] },"
                                         "{ GMwrite[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> resMatmul_cast[arg0, arg1, arg2, arg3, arg4, arg5]] -> resMatmul_cast_local_UB[arg0', arg1', arg2', arg3', arg4', arg5']] -> [(arg3')] },"
                                         "{ GMwrite[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> resMatmul_cast[arg0, arg1, arg2, arg3, arg4, arg5]] -> resMatmul_cast_local_UB[arg0', arg1', arg2', arg3', arg4', arg5']] -> [(arg4')] },"
                                         "{ GMwrite[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13] -> resMatmul_cast[arg0, arg1, arg2, arg3, arg4, arg5]] -> resMatmul_cast_local_UB[arg0', arg1', arg2', arg3', arg4', arg5']] -> [(arg5')] }]"
