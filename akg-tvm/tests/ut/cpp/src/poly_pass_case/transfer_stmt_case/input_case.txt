domain: "{ S_1[c1, h, w, c0] : 0 <= c1 <= 15 and 0 <= h <= 13 and 0 <= w <= 13 and 0 <= c0 <= 15;"
          "S_3[c1, h, w, c0] : 0 <= c1 <= 15 and 0 <= h <= 13 and 0 <= w <= 13 and 0 <= c0 <= 15;"
          "S_2[c1, h, w, c0, kc1, kc0] : 0 <= c1 <= 15 and 0 <= h <= 13 and 0 <= w <= 13 and 0 <= c0 <= 15 and 0 <= kc1 <= 63 and 0 <= kc0 <= 15;"
          "S_0[kc1, h, w, kc0] : 0 <= kc1 <= 63 and 0 <= h <= 13 and 0 <= w <= 13 and 0 <= kc0 <= 15 }"
child:
  sequence:
  - filter: "{ S_0[kc1, h, w, kc0] }"
    child:
      mark: "realize_L1UBL1"
      child:
        schedule: "[{ S_0[kc1, h, w, kc0] -> [(floor((kc1)/64))] },"
                   "{ S_0[kc1, h, w, kc0] -> [(floor((h)/7))] },"
                   "{ S_0[kc1, h, w, kc0] -> [(floor((w)/14))] }]"
        permutable: 1
        coincident: [ 1, 1, 1 ]
        options: "{ isolate[[] -> [0, i1, 0]] : 0 <= i1 <= 1 }"
        child:
          extension: "{ [i0, i1, i2] -> GMwrite[[[i0, i1, i2] -> a_value_local_UB[arg0 = 0, arg1, arg2, arg3, arg4]] -> a_value_local_L1[arg0' = 0, arg1' = arg1, arg2' = arg2, arg3' = arg3, arg4' = arg4]] : arg1 >= 64i0 and 0 <= arg1 <= 63 and arg1 <= 63 + 64i0 and arg2 >= 0 and -7i1 <= arg2 <= 13 - 7i1 and arg2 <= 6 and arg3 >= 14i2 and 0 <= arg3 <= 13 and arg3 <= 13 + 14i2 and 0 <= arg4 <= 15 }"
          child:
            sequence:
            - filter: "{ S_0[kc1, h, w, kc0] }"
              child:
                sequence:
                - filter: "{ S_0[kc1, h, w, kc0] }"
                  child:
                    mark: "realize_UBL1"
                    child:
                      schedule: "[{ S_0[kc1, h, w, kc0] -> [(0)] },"
                                 "{ S_0[kc1, h, w, kc0] -> [(0)] },"
                                 "{ S_0[kc1, h, w, kc0] -> [(0)] }]"
                      permutable: 1
                      coincident: [ 1, 1, 1 ]
                      options: "{ isolate[[0, i1, 0] -> [0, 0, 0]] : 0 <= i1 <= 1 }"
                      child:
                        extension: "{ [i0, i1, i2, 0, 0, 0] -> L1write[[[i0, i1, i2, 0, 0, 0] -> a_value_local_L1[arg0 = 0, arg1, arg2, arg3, arg4]] -> a_value_local_UB[arg0' = 0, arg1' = arg1, arg2' = arg2, arg3' = arg3, arg4' = arg4]] : arg1 >= 64i0 and 0 <= arg1 <= 63 and arg1 <= 63 + 64i0 and arg2 >= 0 and -7i1 <= arg2 <= 13 - 7i1 and arg2 <= 6 and arg3 >= 14i2 and 0 <= arg3 <= 13 and arg3 <= 13 + 14i2 and 0 <= arg4 <= 15 }"
                        child:
                          sequence:
                          - filter: "{ S_0[kc1, h, w, kc0] }"
                            child:
                              sequence:
                              - filter: "{ S_0[kc1, h, w, kc0] }"
                                child:
                                  schedule: "[{ S_0[kc1, h, w, kc0] -> [((kc1) mod 64)] },"
                                             "{ S_0[kc1, h, w, kc0] -> [((h) mod 7)] },"
                                             "{ S_0[kc1, h, w, kc0] -> [((w) mod 14)] }]"
                                  permutable: 1
                                  coincident: [ 1, 1, 1 ]
                                  child:
                                    schedule: "[{ S_0[kc1, h, w, kc0] -> [(kc0)] }]"
                                    permutable: 1
                                    coincident: [ 1 ]
                          - filter: "{ L1write[[[i0, i1, i2, i3, i4, i5] -> a_value_local_L1[arg0, arg1, arg2, arg3, arg4]] -> a_value_local_UB[arg0', arg1', arg2', arg3', arg4']] }"
                            child:
                              schedule: "[{ L1write[[[i0, i1, i2, i3, i4, i5] -> a_value_local_L1[arg0, arg1, arg2, arg3, arg4]] -> a_value_local_UB[arg0', arg1', arg2', arg3', arg4']] -> [(arg1')] },"
                                         "{ L1write[[[i0, i1, i2, i3, i4, i5] -> a_value_local_L1[arg0, arg1, arg2, arg3, arg4]] -> a_value_local_UB[arg0', arg1', arg2', arg3', arg4']] -> [(arg2')] },"
                                         "{ L1write[[[i0, i1, i2, i3, i4, i5] -> a_value_local_L1[arg0, arg1, arg2, arg3, arg4]] -> a_value_local_UB[arg0', arg1', arg2', arg3', arg4']] -> [(arg3')] },"
                                         "{ L1write[[[i0, i1, i2, i3, i4, i5] -> a_value_local_L1[arg0, arg1, arg2, arg3, arg4]] -> a_value_local_UB[arg0', arg1', arg2', arg3', arg4']] -> [(arg4')] }]"
            - filter: "{ GMwrite[[[i0, i1, i2] -> a_value_local_UB[arg0, arg1, arg2, arg3, arg4]] -> a_value_local_L1[arg0', arg1', arg2', arg3', arg4']] }"
              child:
                schedule: "[{ GMwrite[[[i0, i1, i2] -> a_value_local_UB[arg0, arg1, arg2, arg3, arg4]] -> a_value_local_L1[arg0', arg1', arg2', arg3', arg4']] -> [(arg1')] },"
                           "{ GMwrite[[[i0, i1, i2] -> a_value_local_UB[arg0, arg1, arg2, arg3, arg4]] -> a_value_local_L1[arg0', arg1', arg2', arg3', arg4']] -> [(arg2')] },"
                           "{ GMwrite[[[i0, i1, i2] -> a_value_local_UB[arg0, arg1, arg2, arg3, arg4]] -> a_value_local_L1[arg0', arg1', arg2', arg3', arg4']] -> [(arg3')] },"
                           "{ GMwrite[[[i0, i1, i2] -> a_value_local_UB[arg0, arg1, arg2, arg3, arg4]] -> a_value_local_L1[arg0', arg1', arg2', arg3', arg4']] -> [(arg4')] }]"
  - filter: "{ S_1[c1, h, w, c0];"
              "S_3[c1, h, w, c0];"
              "S_2[c1, h, w, c0, kc1, kc0] }"
    child:
      mark: "realize_L1"
      child:
        schedule: "[{ S_1[c1, h, w, c0] -> [(floor((c1)/16))];"
                     "S_3[c1, h, w, c0] -> [(floor((c1)/16))];"
                     "S_2[c1, h, w, c0, kc1, kc0] -> [(floor((c1)/16))] },"
                   "{ S_1[c1, h, w, c0] -> [(floor((h)/7))];"
                     "S_3[c1, h, w, c0] -> [(floor((h)/7))];"
                     "S_2[c1, h, w, c0, kc1, kc0] -> [(floor((h)/7))] },"
                   "{ S_1[c1, h, w, c0] -> [(floor((w)/14))];"
                     "S_3[c1, h, w, c0] -> [(floor((w)/14))];"
                     "S_2[c1, h, w, c0, kc1, kc0] -> [(floor((w)/14))] },"
                   "{ S_1[c1, h, w, c0] -> [(floor((c0)/16))];"
                     "S_3[c1, h, w, c0] -> [(floor((c0)/16))];"
                     "S_2[c1, h, w, c0, kc1, kc0] -> [(floor((c0)/16))] },"
                   "{ S_1[c1, h, w, c0] -> [(0)];"
                     "S_3[c1, h, w, c0] -> [(0)];"
                     "S_2[c1, h, w, c0, kc1, kc0] -> [(floor((kc1)/64))] }]"
        permutable: 1
        coincident: [ 1, 1, 1, 1, 0 ]
        options: "{ isolate[[] -> [0, i1, 0, 0, 0]] : 0 <= i1 <= 1 }"
        child:
          extension: "{ [0, i1, i2, 0, i4] -> GMread[[[0, i1, i2, 0, i4] -> a_value_local_UB[arg0 = 0, arg1, arg2, arg3, arg4]] -> a_value_local_L1[arg0' = 0, arg1' = arg1, arg2' = arg2, arg3' = arg3, arg4' = arg4]] : arg1 >= 64i4 and 0 <= arg1 <= 63 and arg1 <= 63 + 64i4 and arg2 >= 0 and -7i1 <= arg2 <= 13 - 7i1 and arg2 <= 6 and arg3 >= 14i2 and 0 <= arg3 <= 13 and arg3 <= 13 + 14i2 and 0 <= arg4 <= 15;"
                       "[i0, i1, 0, i3, i4] -> GMread[[[i0, i1, 0, i3, i4] -> b_value[arg0, arg1, arg2, arg3]] -> b_value_local_L1[arg0' = arg0, arg1' = arg1, arg2' = arg2, arg3' = arg3]] : 0 <= i1 <= 1 and arg0 >= 64i4 and 0 <= arg0 <= 63 and arg0 <= 63 + 64i4 and arg1 >= 16i0 and 0 <= arg1 <= 15 and arg1 <= 15 + 16i0 and arg2 >= 16i3 and 0 <= arg2 <= 15 and arg2 <= 15 + 16i3 and 0 <= arg3 <= 15;"
                       "[0, i1, 0, 0, 0] -> S_0[kc1, h, w, kc0] : 0 <= kc1 <= 63 and h >= 0 and -7i1 <= h <= 13 - 7i1 and h <= 6 and 0 <= w <= 13 and 0 <= kc0 <= 15;"
                       "[0, i1, i2, 0, i4] -> GMread[[[0, i1, i2, 0, i4] -> a_tmp[arg0 = 0, arg1, arg2, arg3, arg4]] -> a_tmp_local_UB[arg0' = 0, arg1' = arg1, arg2' = -7i1 + arg2, arg3' = arg3, arg4' = arg4]] : arg1 >= 64i4 and 0 <= arg1 <= 63 and arg1 <= 63 + 64i4 and arg2 >= 7i1 and 0 <= arg2 <= 13 and arg2 <= 6 + 7i1 and arg3 >= 14i2 and 0 <= arg3 <= 13 and arg3 <= 13 + 14i2 and 0 <= arg4 <= 15 }"
          child:
            sequence:
            - filter: "{ GMread[[[i0, i1, i2, i3, i4] -> b_value[arg0, arg1, arg2, arg3]] -> b_value_local_L1[arg0', arg1', arg2', arg3']] }"
              child:
                schedule: "[{ GMread[[[i0, i1, i2, i3, i4] -> b_value[arg0, arg1, arg2, arg3]] -> b_value_local_L1[arg0', arg1', arg2', arg3']] -> [(arg0')] },"
                           "{ GMread[[[i0, i1, i2, i3, i4] -> b_value[arg0, arg1, arg2, arg3]] -> b_value_local_L1[arg0', arg1', arg2', arg3']] -> [(arg1')] },"
                           "{ GMread[[[i0, i1, i2, i3, i4] -> b_value[arg0, arg1, arg2, arg3]] -> b_value_local_L1[arg0', arg1', arg2', arg3']] -> [(arg2')] },"
                           "{ GMread[[[i0, i1, i2, i3, i4] -> b_value[arg0, arg1, arg2, arg3]] -> b_value_local_L1[arg0', arg1', arg2', arg3']] -> [(arg3')] }]"
            - filter: "{ GMread[[[i0, i1, i2, i3, i4] -> a_tmp[arg0, arg1, arg2, arg3, arg4]] -> a_tmp_local_UB[arg0', arg1', arg2', arg3', arg4']] }"
              child:
                sequence:
                - filter: "{ GMread[[[i0, i1, i2, i3, i4] -> a_tmp[arg0, arg1, arg2, arg3, arg4]] -> a_tmp_local_UB[arg0', arg1', arg2', arg3', arg4']] }"
                  child:
                    schedule: "[{ GMread[[[i0, i1, i2, i3, i4] -> a_tmp[arg0, arg1, arg2, arg3, arg4]] -> a_tmp_local_UB[arg0', arg1', arg2', arg3', arg4']] -> [(arg1')] },"
                               "{ GMread[[[i0, i1, i2, i3, i4] -> a_tmp[arg0, arg1, arg2, arg3, arg4]] -> a_tmp_local_UB[arg0', arg1', arg2', arg3', arg4']] -> [(arg2')] },"
                               "{ GMread[[[i0, i1, i2, i3, i4] -> a_tmp[arg0, arg1, arg2, arg3, arg4]] -> a_tmp_local_UB[arg0', arg1', arg2', arg3', arg4']] -> [(arg3')] },"
                               "{ GMread[[[i0, i1, i2, i3, i4] -> a_tmp[arg0, arg1, arg2, arg3, arg4]] -> a_tmp_local_UB[arg0', arg1', arg2', arg3', arg4']] -> [(arg4')] }]"
            - filter: "{ S_0[kc1, h, w, kc0] }"
              child:
                sequence:
                - filter: "{ S_0[kc1, h, w, kc0] }"
                  child:
                    schedule: "[{ S_0[kc1, h, w, kc0] -> [(h)] },"
                               "{ S_0[kc1, h, w, kc0] -> [(w)] },"
                               "{ S_0[kc1, h, w, kc0] -> [(kc0)] }]"
            - filter: "{ GMread[[[i0, i1, i2, i3, i4] -> a_value_local_UB[arg0, arg1, arg2, arg3, arg4]] -> a_value_local_L1[arg0', arg1', arg2', arg3', arg4']] }"
              child:
                schedule: "[{ GMread[[[i0, i1, i2, i3, i4] -> a_value_local_UB[arg0, arg1, arg2, arg3, arg4]] -> a_value_local_L1[arg0', arg1', arg2', arg3', arg4']] -> [(arg1')] },"
                           "{ GMread[[[i0, i1, i2, i3, i4] -> a_value_local_UB[arg0, arg1, arg2, arg3, arg4]] -> a_value_local_L1[arg0', arg1', arg2', arg3', arg4']] -> [(arg2')] },"
                           "{ GMread[[[i0, i1, i2, i3, i4] -> a_value_local_UB[arg0, arg1, arg2, arg3, arg4]] -> a_value_local_L1[arg0', arg1', arg2', arg3', arg4']] -> [(arg3')] },"
                           "{ GMread[[[i0, i1, i2, i3, i4] -> a_value_local_UB[arg0, arg1, arg2, arg3, arg4]] -> a_value_local_L1[arg0', arg1', arg2', arg3', arg4']] -> [(arg4')] }]"
            - filter: "{ S_1[c1, h, w, c0];"
                        "S_3[c1, h, w, c0];"
                        "S_2[c1, h, w, c0, kc1, kc0] }"
              child:
                sequence:
                - filter: "{ S_1[c1, h, w, c0];"
                            "S_2[c1, h, w, c0, kc1, kc0] }"
                  child:
                    mark: "conv_gemm"
                    child:
                      mark: "realize_L0"
                      child:
                        schedule: "[{ S_2[c1, h, w, c0, kc1, kc0] -> [(floor((c1 - 16*floor((c1)/16))/65535))];"
                                     "S_1[c1, h, w, c0] -> [(floor((c1 - 16*floor((c1)/16))/65535))] },"
                                   "{ S_2[c1, h, w, c0, kc1, kc0] -> [(floor((h - 7*floor((h)/7))/65535))];"
                                     "S_1[c1, h, w, c0] -> [(floor((h - 7*floor((h)/7))/65535))] },"
                                   "{ S_2[c1, h, w, c0, kc1, kc0] -> [(floor((w - 14*floor((w)/14))/65535))];"
                                     "S_1[c1, h, w, c0] -> [(floor((w - 14*floor((w)/14))/65535))] },"
                                   "{ S_2[c1, h, w, c0, kc1, kc0] -> [(floor((c0 - 16*floor((c0)/16))/65535))];"
                                     "S_1[c1, h, w, c0] -> [(floor((c0 - 16*floor((c0)/16))/65535))] },"
                                   "{ S_2[c1, h, w, c0, kc1, kc0] -> [(floor((kc1 - 64*floor((kc1)/64))/65535))];"
                                     "S_1[c1, h, w, c0] -> [(0)] }]"
                        permutable: 1
                        coincident: [ 1, 1, 1, 1, 0 ]
                        options: "{ isolate[[0, i1, 0, 0, 0] -> [0, 0, 0, 0, 0]] : 0 <= i1 <= 1 }"
                        child:
                          extension: "{ [i0, i1, 0, i3, i4, 0, 0, 0, 0, 0] -> L1read[[[i0, i1, 0, i3, i4, 0, 0, 0, 0, 0] -> b_value_local_L1[arg0, arg1, arg2, arg3]] -> b_value_local_L1_local_L0B[arg0' = arg0, arg1' = arg1, arg2' = arg2, arg3' = arg3]] : 0 <= i1 <= 1 and arg0 >= 64i4 and 0 <= arg0 <= 63 and arg0 <= 63 + 64i4 and arg1 >= 16i0 and 0 <= arg1 <= 15 and arg1 <= 15 + 16i0 and arg2 >= 16i3 and 0 <= arg2 <= 15 and arg2 <= 15 + 16i3 and 0 <= arg3 <= 15;"
                                       "[i0, i1, i2, i3, 0, 0, 0, 0, 0, 0] -> UBL0write[[[i0, i1, i2, i3, 0, 0, 0, 0, 0, 0] -> c_value_local_UB[arg0 = 0, arg1, arg2, arg3, arg4]] -> c_value_local_UB_local_L0C[arg0' = 0, arg1' = arg1, arg2' = arg2, arg3' = arg3, arg4' = arg4]] : arg1 >= 16i0 and 0 <= arg1 <= 15 and arg1 <= 15 + 16i0 and arg2 >= 0 and -7i1 <= arg2 <= 13 - 7i1 and arg2 <= 6 and arg3 >= 14i2 and 0 <= arg3 <= 13 and arg3 <= 13 + 14i2 and arg4 >= 16i3 and 0 <= arg4 <= 15 and arg4 <= 15 + 16i3;"
                                       "[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9] -> L1read[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9] -> a_value_fractal_L1[arg0'' = 0, arg1'', arg2'', arg3'', arg4'']] -> a_value_local_L1_local_L0A[arg0 = 0, arg1 = arg2'', arg2, arg3, arg4 = arg4'']] : (2 + arg3'' + 2arg2 - arg3 + 2*floor((-1 - arg3)/14)) mod 16 = 0 and 0 <= arg1'' <= 6 and 0 <= arg2'' <= 63 and 0 <= arg3'' <= 15 and 0 <= arg4'' <= 15 and 0 <= arg2 <= 6 and 0 <= arg3 <= 13 and 14*floor((-1 - arg3)/14) >= -14 + 16arg1'' - 14arg2 - arg3 and -14 - 14arg2 - arg3 <= 14*floor((-1 - arg3)/14) <= 83 - 14arg2 - arg3 and 14*floor((-1 - arg3)/14) <= 1 + 16arg1'' - 14arg2 - arg3 }"
                          child:
                            sequence:
                            - filter: "{ L1read[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9] -> b_value_local_L1[arg0, arg1, arg2, arg3]] -> b_value_local_L1_local_L0B[arg0', arg1', arg2', arg3']] }"
                              child:
                                schedule: "[{ L1read[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9] -> b_value_local_L1[arg0, arg1, arg2, arg3]] -> b_value_local_L1_local_L0B[arg0', arg1', arg2', arg3']] -> [(arg0')] },"
                                           "{ L1read[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9] -> b_value_local_L1[arg0, arg1, arg2, arg3]] -> b_value_local_L1_local_L0B[arg0', arg1', arg2', arg3']] -> [(arg1')] },"
                                           "{ L1read[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9] -> b_value_local_L1[arg0, arg1, arg2, arg3]] -> b_value_local_L1_local_L0B[arg0', arg1', arg2', arg3']] -> [(arg2')] },"
                                           "{ L1read[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9] -> b_value_local_L1[arg0, arg1, arg2, arg3]] -> b_value_local_L1_local_L0B[arg0', arg1', arg2', arg3']] -> [(arg3')] }]"
                            - filter: "{ L1read[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9] -> a_value_fractal_L1[arg0'', arg1'', arg2'', arg3'', arg4'']] -> a_value_local_L1_local_L0A[arg0, arg1, arg2, arg3, arg4]] }"
                              child:
                                schedule: "[{ L1read[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9] -> a_value_fractal_L1[arg0'', arg1'', arg2'', arg3'', arg4'']] -> a_value_local_L1_local_L0A[arg0, arg1, arg2, arg3, arg4]] -> [(arg1)] },"
                                           "{ L1read[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9] -> a_value_fractal_L1[arg0'', arg1'', arg2'', arg3'', arg4'']] -> a_value_local_L1_local_L0A[arg0, arg1, arg2, arg3, arg4]] -> [(arg2)] },"
                                           "{ L1read[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9] -> a_value_fractal_L1[arg0'', arg1'', arg2'', arg3'', arg4'']] -> a_value_local_L1_local_L0A[arg0, arg1, arg2, arg3, arg4]] -> [(arg3)] },"
                                           "{ L1read[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9] -> a_value_fractal_L1[arg0'', arg1'', arg2'', arg3'', arg4'']] -> a_value_local_L1_local_L0A[arg0, arg1, arg2, arg3, arg4]] -> [(arg4)] }]"
                            - filter: "{ S_2[c1, h, w, c0, kc1, kc0];"
                                        "S_1[c1, h, w, c0] }"
                              child:
                                sequence:
                                - filter: "{ S_1[c1, h, w, c0];"
                                            "S_2[c1, h, w, c0, kc1, kc0] }"
                                  child:
                                    schedule: "[{ S_2[c1, h, w, c0, kc1, kc0] -> [((c1) mod 16)];"
                                                 "S_1[c1, h, w, c0] -> [((c1) mod 16)] },"
                                               "{ S_2[c1, h, w, c0, kc1, kc0] -> [((h) mod 7)];"
                                                 "S_1[c1, h, w, c0] -> [((h) mod 7)] },"
                                               "{ S_2[c1, h, w, c0, kc1, kc0] -> [((w) mod 14)];"
                                                 "S_1[c1, h, w, c0] -> [((w) mod 14)] },"
                                               "{ S_2[c1, h, w, c0, kc1, kc0] -> [((c0) mod 16)];"
                                                 "S_1[c1, h, w, c0] -> [((c0) mod 16)] },"
                                               "{ S_2[c1, h, w, c0, kc1, kc0] -> [((kc1) mod 64)];"
                                                 "S_1[c1, h, w, c0] -> [(0)] }]"
                                    permutable: 1
                                    coincident: [ 1, 1, 1, 1, 0 ]
                                    child:
                                      schedule: "[{ S_2[c1, h, w, c0, kc1, kc0] -> [(kc0)];"
                                                   "S_1[c1, h, w, c0] -> [(0)] }]"
                                      permutable: 1
                                      child:
                                        sequence:
                                        - filter: "{ S_1[c1, h, w, c0] }"
                                        - filter: "{ S_2[c1, h, w, c0, kc1, kc0] }"
                            - filter: "{ UBL0write[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9] -> c_value_local_UB[arg0, arg1, arg2, arg3, arg4]] -> c_value_local_UB_local_L0C[arg0', arg1', arg2', arg3', arg4']] }"
                              child:
                                schedule: "[{ UBL0write[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9] -> c_value_local_UB[arg0, arg1, arg2, arg3, arg4]] -> c_value_local_UB_local_L0C[arg0', arg1', arg2', arg3', arg4']] -> [(arg1')] },"
                                           "{ UBL0write[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9] -> c_value_local_UB[arg0, arg1, arg2, arg3, arg4]] -> c_value_local_UB_local_L0C[arg0', arg1', arg2', arg3', arg4']] -> [(arg2')] },"
                                           "{ UBL0write[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9] -> c_value_local_UB[arg0, arg1, arg2, arg3, arg4]] -> c_value_local_UB_local_L0C[arg0', arg1', arg2', arg3', arg4']] -> [(arg3')] },"
                                           "{ UBL0write[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9] -> c_value_local_UB[arg0, arg1, arg2, arg3, arg4]] -> c_value_local_UB_local_L0C[arg0', arg1', arg2', arg3', arg4']] -> [(arg4')] }]"
                - filter: "{ S_3[c1, h, w, c0] }"
                  child:
                    mark: "realize_UBL0"
                    child:
                      schedule: "[{ S_3[c1, h, w, c0] -> [(floor((c1 - 16*floor((c1)/16))/65535))] },"
                                 "{ S_3[c1, h, w, c0] -> [(floor((h - 7*floor((h)/7))/65535))] },"
                                 "{ S_3[c1, h, w, c0] -> [(floor((w - 14*floor((w)/14))/65535))] },"
                                 "{ S_3[c1, h, w, c0] -> [(floor((c0 - 16*floor((c0)/16))/65535))] },"
                                 "{ S_3[c1, h, w, c0] -> [(0)] }]"
                      permutable: 1
                      coincident: [ 1, 1, 1, 1, 0 ]
                      options: "{ isolate[[0, i1, 0, 0, 0] -> [0, 0, 0, 0, 0]] : 0 <= i1 <= 1 }"
                      child:
                        extension: "{ [i0, i1, 0, i3, 0, 0, 0, 0, 0, 0] -> GMread[[[i0, i1, 0, i3, 0, 0, 0, 0, 0, 0] -> bias[arg0 = 0, arg1, arg2 = 0, arg3 = 0, arg4]] -> bias_local_UB[arg0' = 0, arg1' = arg1, arg2' = 0, arg3' = 0, arg4' = arg4]] : 0 <= i1 <= 1 and arg1 >= 16i0 and 0 <= arg1 <= 15 and arg1 <= 15 + 16i0 and arg4 >= 16i3 and 0 <= arg4 <= 15 and arg4 <= 15 + 16i3;"
                                     "[i0, i1, i2, i3, 0, 0, 0, 0, 0, 0] -> GMwrite[[[i0, i1, i2, i3, 0, 0, 0, 0, 0, 0] -> OUT[arg0 = 0, arg1, arg2, arg3, arg4]] -> OUT_local_UB[arg0' = 0, arg1' = arg1, arg2' = -7i1 + arg2, arg3' = arg3, arg4' = arg4]] : arg1 >= 16i0 and 0 <= arg1 <= 15 and arg1 <= 15 + 16i0 and arg2 >= 7i1 and 0 <= arg2 <= 13 and arg2 <= 6 + 7i1 and arg3 >= 14i2 and 0 <= arg3 <= 13 and arg3 <= 13 + 14i2 and arg4 >= 16i3 and 0 <= arg4 <= 15 and arg4 <= 15 + 16i3 }"
                        child:
                          sequence:
                          - filter: "{ GMread[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9] -> bias[arg0, arg1, arg2, arg3, arg4]] -> bias_local_UB[arg0', arg1', arg2', arg3', arg4']] }"
                            child:
                              schedule: "[{ GMread[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9] -> bias[arg0, arg1, arg2, arg3, arg4]] -> bias_local_UB[arg0', arg1', arg2', arg3', arg4']] -> [(arg1')] },"
                                         "{ GMread[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9] -> bias[arg0, arg1, arg2, arg3, arg4]] -> bias_local_UB[arg0', arg1', arg2', arg3', arg4']] -> [(arg4')] }]"
                          - filter: "{ S_3[c1, h, w, c0] }"
                            child:
                              sequence:
                              - filter: "{ S_3[c1, h, w, c0] }"
                                child:
                                  schedule: "[{ S_3[c1, h, w, c0] -> [((c1) mod 16)] },"
                                             "{ S_3[c1, h, w, c0] -> [((h) mod 7)] },"
                                             "{ S_3[c1, h, w, c0] -> [((w) mod 14)] },"
                                             "{ S_3[c1, h, w, c0] -> [((c0) mod 16)] },"
                                             "{ S_3[c1, h, w, c0] -> [(63)] }]"
                                  permutable: 1
                                  coincident: [ 1, 1, 1, 1, 0 ]
                                  child:
                                    schedule: "[{ S_3[c1, h, w, c0] -> [(15)] }]"
                                    permutable: 1
                          - filter: "{ GMwrite[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9] -> OUT[arg0, arg1, arg2, arg3, arg4]] -> OUT_local_UB[arg0', arg1', arg2', arg3', arg4']] }"
                            child:
                              schedule: "[{ GMwrite[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9] -> OUT[arg0, arg1, arg2, arg3, arg4]] -> OUT_local_UB[arg0', arg1', arg2', arg3', arg4']] -> [(arg1')] },"
                                         "{ GMwrite[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9] -> OUT[arg0, arg1, arg2, arg3, arg4]] -> OUT_local_UB[arg0', arg1', arg2', arg3', arg4']] -> [(arg2')] },"
                                         "{ GMwrite[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9] -> OUT[arg0, arg1, arg2, arg3, arg4]] -> OUT_local_UB[arg0', arg1', arg2', arg3', arg4']] -> [(arg3')] },"
                                         "{ GMwrite[[[i0, i1, i2, i3, i4, i5, i6, i7, i8, i9] -> OUT[arg0, arg1, arg2, arg3, arg4]] -> OUT_local_UB[arg0', arg1', arg2', arg3', arg4']] -> [(arg4')] }]"
