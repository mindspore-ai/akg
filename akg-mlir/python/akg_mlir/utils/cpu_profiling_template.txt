  llvm.func @nanoTime() -> i64 attributes {llvm.emit_c_interface, sym_visibility = "private"} {
    %0 = llvm.call @_mlir_ciface_nanoTime() : () -> i64
    llvm.return %0 : i64
  }
  llvm.func @warmUp(%arg0 : INPUTS_PTR) -> () attributes {llvm.emit_c_interface, sym_visibility = "private"} {
    %c0 = llvm.mlir.constant(0 : index) : i64
    %c1 = llvm.mlir.constant(1 : index) : i64
    %c100 = llvm.mlir.constant(1000 : index) : i64
    llvm.br ^bb1(%c0 : i64)
  ^bb1(%2: i64):  // 2 preds: ^bb0, ^bb2
    %1 = llvm.icmp "slt" %2, %c100 : i64
    llvm.cond_br %1, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    llvm.call @KERNEL_NAME(%arg0) : (INPUTS_PTR) -> ()
    %3 = llvm.add %2, %c1  : i64
    llvm.br ^bb1(%3 : i64)
  ^bb3:  // pred: ^bb1
    llvm.return
  }
  llvm.func @_mlir_ciface_nanoTime() -> i64 attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.func @main(INPUTS_NAME : INPUTS_PTR, %arg_time: !llvm.ptr<i64>) attributes {llvm.emit_c_interface, sym_visibility = "public"} {
    %c0 = llvm.mlir.constant(0 : index) : i64
    %c1 = llvm.mlir.constant(1 : index) : i64
    %ctimes = llvm.mlir.constant(CTIMES : index) : i64
    llvm.call @warmUp(INPUTS_NAME) : (INPUTS_PTR) -> ()
    %0 = llvm.call @nanoTime() : () -> i64
    llvm.br ^bb1(%c0 : i64)
  ^bb1(%2: i64):  // 2 preds: ^bb0, ^bb2
    %1 = llvm.icmp "slt" %2, %ctimes : i64
    llvm.cond_br %1, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    llvm.call @KERNEL_NAME(INPUTS_NAME) : (INPUTS_PTR) -> ()
    %3 = llvm.add %2, %c1  : i64
    llvm.br ^bb1(%3 : i64)
  ^bb3:  // pred: ^bb1
    %4 = llvm.call @nanoTime() : () -> i64
    %5 = llvm.sub %4, %0  : i64
    llvm.store %5, %arg_time : !llvm.ptr<i64>
    llvm.return
  }
