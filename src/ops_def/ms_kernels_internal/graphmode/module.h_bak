#ifndef MS_CUSTOM_OPS_MODULE_MODULE_H_
#define MS_CUSTOM_OPS_MODULE_MODULE_H_

#include <functional>
#include <pybind11/pybind11.h>
#include <string>
#include <vector>

// Define the type of module registration functions
using ModuleRegisterFunction = std::function<void(pybind11::module_ &)>;

// Module registry class
class ModuleRegistry {
public:
  // Get the singleton instance
  static ModuleRegistry &Instance() {
    static ModuleRegistry instance;
    return instance;
  }

  // Register a module function
  void Register(const ModuleRegisterFunction &func) {
    functions_.push_back(func);
  }

  // Call all registered module functions
  void RegisterAll(pybind11::module_ &m) {
    for (const auto &func : functions_) {
      func(m);
    }
  }

private:
  ModuleRegistry() = default;
  ~ModuleRegistry() = default;

  // Disable copy and assignment
  ModuleRegistry(const ModuleRegistry &) = delete;
  ModuleRegistry &operator=(const ModuleRegistry &) = delete;

  // Store all registered functions
  std::vector<ModuleRegisterFunction> functions_;
};

#define REG_GRAPH_MODE_OP(op)                                                  \
  static void op##_func() {}                                                   \
  static void op##_register(pybind11::module_ &m) { m.def(#op, &op##_func); }  \
  struct op##_registrar {                                                      \
    op##_registrar() { ModuleRegistry::Instance().Register(op##_register); }   \
  };                                                                           \
  static op##_registrar registrar_instance

#endif // MS_CUSTOM_OPS_MODULE_MODULE_H_
